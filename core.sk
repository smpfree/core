on command:
 if executor is player:
  if player is not op:
   if command is "help", "hub", "list", "create", "delete", "join" or "invite":
   else:
    cancel event
    send "&fUnknown command. Type ""/help"" for help."
 else:
  if command is "stop":
   cancel event
   set {stopping} to true
   loop all players:
    kick the loop-player due to "Server is stopping..."
   wait 10 seconds
   execute console command "stop"

on command:
 if executor is player:
  if {cooldown::%player%} is not set:
   set {cooldown::%player%} to 5
   wait 1 second
   set {cooldown::%player%} to 4
   wait 1 second
   set {cooldown::%player%} to 3
   wait 1 second
   set {cooldown::%player%} to 2
   wait 1 second
   set {cooldown::%player%} to 1
   wait 1 second
   delete {cooldown::%player%}
  else:
   if command is not "hub":
    cancel event
    send "&cWait %{cooldown::%player%}% seconds before running another command."

on join:
 if {stopping} is set:
  kick the player due to "Server is stopping..."

on load:
 delete {stopping}

on rightclick on sign:
 if world of player is not "world":
  cancel event

command /help [<text>]:
 trigger:
  send "&a----- Help -----"
  send "&b/help &f- &eShows the help menu."
  send "&b/hub &f- &eGo to the hub."
  send "&b/list &f- &eShows the list of SMP servers you have access to."
  send "&b/create &f- &eCreate a SMP server."
  send "&b/delete &f- &eDelete a SMP server."
  send "&b/join &f- &eJoin a SMP server."
  send "&a----------------"

command /list [<text>]:
 trigger:
  send "&a----- Your SMP Servers ------"
  loop {server::*}:
   if {server::%loop-index%::users::%player%} is set:
    set {_own} to true
    if {server::%loop-index%::owner} is player:
     send "&b%loop-index% &f- &eOwner"
    else:
     if {server::%loop-index%::users::%player%} is "op":
      send "&b%loop-index% &f- &eOP"
     else:
      send "&b%loop-index% &f- &eMember"
  if {_own} is not true:
   send "&cYou do not own any SMP server!"
  send "&a----------------------------"

command /invite [<text>] [<offline player>] [<text>]:
 trigger:
  if arg-2 is set:
   if arg-3 is set:
    send "&cThis command should not have a third argument."
   else:
    if arg-2 is offline:
     send "&cYou can only invite players that are online."
    else:
     if arg-2 is player:
      send "&cYou cannot invite yourself to a SMP server."
     else:
      if {server::%arg-1%} is set:
       if {server::%arg-1%::owner} is player:
        if {server::%arg-1%::users::%arg-2%} is set:
         send "&cThis player already has access to the SMP server."
        else:
         set {server::%arg-1%::users::%arg-2%} to "member"
         send "&eSuccessfully given this player access to the SMP server."
       else:
        send "&cOnly the SMP server owner can invite people to the server."
      else:
       send "&cA SMP server with this name does not exist."
  else:
   send "&cIncorrect usage. Please use ""/invite <server> <player>"" instead."

command /kick [<text>] [<offline player>] [<text>]:
 trigger:
  if arg-2 is set:
   if arg-3 is set:
    send "&cThis command should not have a third argument."
   else:
    if "%arg-2%" is "%player%":
     send "&cYou cannot kick yourself from a SMP server."
    else:
     if {server::%arg-1%} is set:
      if {server::%arg-1%::owner} is player:
       if {server::%arg-1%::users::%arg-2%} is set:
        delete {server::%arg-1%::users::%arg-2%}
        send "&eSuccessfully kicked this player from the SMP server."
        if arg-2 is online:
         set {_worldname} to "%world of arg-2%"
         set {_worldcheck} to the first 2 characters of {_worldname}
         if {_worldcheck} is "s-":
          set {_world} to last length of "%world of arg-2%" - 2 characters of "%world of arg-2%"
          if last 6 characters of "%{_world}%" is "-world":
           set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
          if last 7 characters of "%{_world}%" is "-nether":
           set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
          if last 4 characters of "%{_world}%" is "-end":
           set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
          if {_world} is arg-1:
           make arg-2 execute "hub"
           send "&cYou have been kicked from the SMP server you were just on."
           stop
       else:
        send "&cThis player already does not have access to the SMP server."
      else:
       send "&cOnly the SMP server owner can kick people from the server."
     else:
      send "&cA SMP server with this name does not exist."
  else:
   send "&cIncorrect usage. Please use ""/kick <server> <player>"" instead."

every 1 seconds:
 loop all players:
  set {_worldname} to "%world of loop-player%"
  set {_worldcheck} to the first 2 characters of {_worldname}
  if {_worldcheck} is "s-":
   set {_world} to last length of "%world of loop-player%" - 2 characters of "%world of loop-player%"
   if last 6 characters of "%{_world}%" is "-world":
    set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
   if last 7 characters of "%{_world}%" is "-nether":
    set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
   if last 4 characters of "%{_world}%" is "-end":
    set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
  else:
   set {_world} to "hub"
  loop all players:
   set {_loopworldname} to "%world of loop-player-2%"
   set {_loopworldcheck} to the first 2 characters of {_worldname}
   if {_loopworldcheck} is "s-":
    set {_loopworld} to last length of "%world of loop-player-2%" - 2 characters of "%world of loop-player-2%"
    if last 6 characters of "%{_loopworld}%" is "-world":
     set {_loopworld} to the first length of {_loopworld} - 6 characters of "%{_loopworld}%"
    if last 7 characters of "%{_loopworld}%" is "-nether":
     set {_loopworld} to the first length of {_loopworld} - 7 characters of "%{_loopworld}%"
    if last 4 characters of "%{_loopworld}%" is "-end":
     set {_loopworld} to the first length of {_loopworld} - 4 characters of "%{_loopworld}%"
   else:
    set {_loopworld} to "hub"
   if {_loopworld} is not {_world}:
    hide loop-player-2 from loop-player-1
   else:
    reveal loop-player-2 from loop-player-1

on chat:
 cancel event
 set {_worldname} to "%world of player%"
 set {_worldcheck} to the first 2 characters of {_worldname}
 if {_worldcheck} is "s-":
  set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
  if last 6 characters of "%{_world}%" is "-world":
   set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
  if last 7 characters of "%{_world}%" is "-nether":
   set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
  if last 4 characters of "%{_world}%" is "-end":
   set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
  loop all players:
   if world of loop-player is "s-%{_world}%-world", "s-%{_world}%-nether" or "s-%{_world}%-end":
    if {color::%player%} is set:
     send "%{color::%player%}%%player%&f: %message%" to loop-player
    else:
     send "%player%&f: %message%" to loop-player
 else:
  send "[Hub] %player%&f: %message%" to console
  loop all players:
   if world of loop-player is world of player:
    if {color::%player%} is set:
     send "%{color::%player%}%%player%&f: %message%" to loop-player
    else:
     send "%player%&f: %message%" to loop-players

command /setmaxservers [<offline player>] [<text>] [<text>]:
 trigger:
  if executor is console:
   if arg-2 is set:
    set {_max} to arg-2 parsed as a number
    if {_max} is set:
     if {_max} is less than 0:
      send "&cThe second argument must be above 0."
     else:
      if {_max} is 0:
       delete {maxservers::%arg-1%}
      else:
       set {maxservers::%arg-1%} to {_max}
      send "&eSuccessfully set %arg-1%'s max servers to %{_max}%."
    else:
     send "&cThe second argument must be a number."
   else:
    send "&cIncorrect usage. Please use ""/setmaxservers <player> <amount>"" instead."
  else:
   send "&cOnly the console can run this command."

command /create [<text>] [<text>]:
 trigger:
  if {maxservers::%player%} is not set:
   #set {maxservers::%player%} to 1
   send "&cOnly alpha testers can make a SMP server at the moment."
   stop
  if arg-1 is not set:
   send "&cIncorrect usage. Please use ""/create <server name>"" instead."
   stop
  else:
   if arg-2 is set:
    send "&cIncorrect usage. The server name should only contain one argument."
    stop
   else:
    if arg-1 is "hub":
     send "&cA server with this name already exists."
     stop
    if {server::%arg-1%} is set:
     send "&cA server with this name already exists."
     stop
    else:
     set {_servers} to 0
     loop {server::*}:
      if {server::%loop-index%::owner} is player:
       add 1 to {_servers}
     if {_servers} is greater than {maxservers::%player%}:
      send "&cYou have reached the maximum amount of servers you can make. (%{maxservers::%player%}%)"
      stop
     else:
      send "&eYour private SMP server is being created..."
      set {server::%arg-1%} to "free"
      set {server::%arg-1%::owner} to player
      set {server::%arg-1%::users::%player%} to "op"
      execute console command "mv create s-%arg-1%-world normal"
      execute console command "mv create s-%arg-1%-nether nether"
      execute console command "mv create s-%arg-1%-end end"
      execute console command "mvnp link nether s-%arg-1%-world s-%arg-1%-nether"
      execute console command "mvnp link nether s-%arg-1%-nether s-%arg-1%-world"
      execute console command "mvnp link end s-%arg-1%-world s-%arg-1%-end"
      execute console command "mvnp link end s-%arg-1%-end s-%arg-1%-world"
      execute console command "mvnp link end s-%arg-1%-nether s-%arg-1%-end"
      execute console command "mvnp link nether s-%arg-1%-end s-%arg-1%-nether"
      send "&eYour server has been created."
      set {server::%arg-1%::loaded} to true
      stop

command /delete [<text>] [<text>]:
 trigger:
  if arg-1 is not set:
   send "&cIncorrect usage. Please use ""/delete <server name>"" instead."
   stop
  else:
   if arg-2 is set:
    send "&cIncorrect usage. The server name should only contain one argument."
    stop
   else:
    if {server::%arg-1%} is set:
     if {server::%arg-1%::owner} is player:
      send "&eDeleting server..."
      loop all players:
       if world of loop-player is "s-%arg-1%-world", "s-%arg-1%-nether" or "s-%arg-1%-end":
        execute loop-player command "hub"
      wait 1 tick
      delete {server::%arg-1%::*}
      if {server::%arg-1%::loaded} is not true:
       execute console command "mv load s-%arg-1%-world"
       execute console command "mv load s-%arg-1%-nether"
       execute console command "mv load s-%arg-1%-end"
      execute console command "mv delete s-%arg-1%-world"
      execute console command "mvconfirm"
      execute console command "mv delete s-%arg-1%-nether"
      execute console command "mvconfirm"
      execute console command "mv delete s-%arg-1%-end"
      execute console command "mvconfirm"
      delete {server::%arg-1%}
      send "&eYour server has been deleted."
      stop
     else:
      send "&cYou do not own this server."
      stop
    else:
     send "&cA server with this name does not exists."
     stop

command /join [<text>] [<text>]:
 trigger:
  if world of player is not "world":
   send "&cYou can only run this command at the hub."
   stop
  if arg-1 is not set:
   send "&cIncorrect usage. Please use ""/join <server name>"" instead."
   stop
  else:
   if arg-2 is set:
    send "&cIncorrect usage. The server name should only contain one argument."
    stop
   else:
    if arg-1 is "hub":
     make player execute "hub"
     stop
    if {server::%arg-1%} is set:
     if {server::%arg-1%::users::%player%} is set:
      loop all players:
       if world of loop-player is "world":
        send "&e%player%&e has left the game" to loop-player
      set {_worldname} to "%world of player%"
      set {_worldcheck} to the first 2 characters of {_worldname}
      if {_worldcheck} is "s-":
       set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
       if last 6 characters of "%{_world}%" is "-world":
        set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
       if last 7 characters of "%{_world}%" is "-nether":
        set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
       if last 4 characters of "%{_world}%" is "-end":
        set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
       set {_world} to "server-%{_world}%"
      else:
       set {_world} to "hub"
      saveinv("%{_world}%", player)
      if {server::%arg-1%::loaded} is not true:
       execute console command "mv load s-%arg-1%-world"
       execute console command "mv load s-%arg-1%-nether"
       execute console command "mv load s-%arg-1%-end"
       set {server::%arg-1%::loaded} to true
      if {server::%arg-1%::firstjoin::%player%} is not set:
       set {server::%arg-1%::world::%player%} to "s-%arg-1%-world"
      execute console command "mvconfirm"
      if {server::%arg-1%::firstjoin::%player%} is not set:
       execute console command "mv tp %player% %{server::%arg-1%::world::%player%}%"
       wait 1 tick
       set {server::%arg-1%::location::x::%player%} to x-coordinate of player
       set {server::%arg-1%::location::y::%player%} to y-coordinate of player
       set {server::%arg-1%::location::z::%player%} to z-coordinate of player
       set {server::%arg-1%::spawnpoint::x::%player%} to x-coordinate of player
       set {server::%arg-1%::spawnpoint::y::%player%} to y-coordinate of player
       set {server::%arg-1%::spawnpoint::z::%player%} to z-coordinate of player
      else:
       execute console command "mv tp %player% e:%{server::%arg-1%::world::%player%}%:%round({server::%arg-1%::location::x::%player%})%,%round({server::%arg-1%::location::y::%player%})%,%round({server::%arg-1%::location::z::%player%})%"
       wait 1 tick
      wait 1 tick
      if {server::%arg-1%::firstjoin::%player%} is not set:
       teleport player to location -960, 4, 403
       clear player's inventory
       remove fire from player
       heal the player
       feed the player
       set xp of player to 0
       set {server::%arg-1%::firstjoin::%player%} to true
      else:
       giveinv("server-%arg-1%", player)
      send "&eYou have joined the server."
      execute console command "effect clear %player%" # temp
      loop all players:
       if world of loop-player is "s-%arg-1%-world", "s-%arg-1%-nether" or "s-%arg-1%-end":
        send "&e%player%&e has joined the game" to loop-player
      stop
     else:
      send "&cYou have no permission to join this server."
      stop
    else:
     send "&cA server with this name does not exists."
     stop

command /hub [<text>]:
 trigger:
  if world of player is not "world":
   set {_worldname} to "%world of player%"
   set {_worldcheck} to the first 2 characters of {_worldname}
   if {_worldcheck} is "s-":
    set {server::%arg-1%::world::%player%} to "%{_worldname}%"
    set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
    if last 6 characters of "%{_world}%" is "-world":
     set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
    if last 7 characters of "%{_world}%" is "-nether":
     set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
    if last 4 characters of "%{_world}%" is "-end":
     set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
    set {server::%{_world}%::location::x::%player%} to x-coordinate of player
    set {server::%{_world}%::location::y::%player%} to y-coordinate of player
    set {server::%{_world}%::location::z::%player%} to z-coordinate of player
    loop all players:
     if world of loop-player is "s-%{_world}%-world", "s-%{_world}%-nether" or "s-%{_world}%-end":
      send "&e%player%&e has left the game" to loop-player
    set {_world} to "server-%{_world}%"
    wait 1 tick
   else:
    set {_world} to "hub"
   saveinv("%{_world}%", player)
   execute console command "mv tp %player% world"
   execute console command "mvconfirm"
   wait 1 tick
   giveinv("hub", player)
   wait 1 tick
   loop all players:
    if world of loop-player is "world":
     send "&e%player%&e has joined the game" to loop-player
  teleport player to location -960, 4, 403
  clear player's inventory
  remove fire from player
  heal the player
  feed the player
  set xp of player to 0
  execute console command "effect clear %player%"
  send "&eYou have been sent to the hub."
  stop

every 5 seconds:
 delete {_worlds::*}
 loop all players:
  set {_worldname} to "%world of loop-player%"
  set {_worldcheck} to the first 2 characters of {_worldname}
  if {_worldcheck} is "s-":
   set {_world} to last length of "%world of loop-player%" - 2 characters of "%world of loop-player%"
   if last 6 characters of "%{_world}%" is "-world":
    set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
   if last 7 characters of "%{_world}%" is "-nether":
    set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
   if last 4 characters of "%{_world}%" is "-end":
    set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
   set {_worlds::%{_world}%} to true
 loop {server::*}:
  if {_worlds::%loop-index%} is not true:
   if {server::%loop-index%::loaded} is true:
    execute console command "mv unload s-%loop-index%-world"
    execute console command "mv unload s-%loop-index%-nether"
    execute console command "mv unload s-%loop-index%-end"
    set {server::%loop-index%::loaded} to false

on quit:
 set quit message to ""
 set {_worldname} to "%world of player%"
 set {_worldcheck} to the first 2 characters of {_worldname}
 if {_worldcheck} is "s-":
  set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
  if last 6 characters of "%{_world}%" is "-world":
   set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
  if last 7 characters of "%{_world}%" is "-nether":
   set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
  if last 4 characters of "%{_world}%" is "-end":
   set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
  set {server::%{_world}%::world::%player%} to "%world of player%"
  set {_world} to "server-%{_world}%"
  set {server::%{_world}%::location::x::%player%} to x-coordinate of player
  set {server::%{_world}%::location::y::%player%} to y-coordinate of player
  set {server::%{_world}%::location::z::%player%} to z-coordinate of player
  loop all players:
   if world of loop-player is "s-%{_world}%-world", "s-%{_world}%-nether" or "s-%{_world}%-end":
    send "&e%player%&e has left the game" to loop-player
 else:
  set {_world} to "hub"
  loop all players:
   if world of loop-player is "world":
    send "&e%player%&e has left the game" to loop-player
 saveinv("%{_world}%", player)

on join:
 set join message to ""
 make player execute "hub"
 stop

on death:
 set {_worldname} to "%world of player%"
 set {_worldcheck} to the first 2 characters of {_worldname}
 if {_worldcheck} is "s-":
  set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
  if last 6 characters of "%{_world}%" is "-world":
   set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
  if last 7 characters of "%{_world}%" is "-nether":
   set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
  if last 4 characters of "%{_world}%" is "-end":
   set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
  wait 1 tick
  execute console command "mv tp %player% e:s-%{_world}%-world:%{server::%{_world}%::spawnpoint::x::%player%}%,%{server::%{_world}%::spawnpoint::y::%player%}%,%{server::%{_world}%::spawnpoint::z::%player%}%"
  execute console command "mvconfirm"

on death:
 force player to respawn

on rightclick:
 set {_eventblock} to "%event-block%"
 if last 5 characters of {_eventblock} is " head":
  set {_eventblock} to first length of {_eventblock} - 5 characters of "%{_eventblock}%"
 last 4 characters of {_eventblock} is " bed"
 set {_worldname} to "%world of player%"
 set {_worldcheck} to the first 2 characters of {_worldname}
 if {_worldcheck} is "s-":
  set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
  if last 6 characters of "%{_world}%" is "-world":
   set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
   set {server::%{_world}%::spawnpoint::x::%player%} to x-coordinate of player
   set {server::%{_world}%::spawnpoint::y::%player%} to y-coordinate of player
   set {server::%{_world}%::spawnpoint::z::%player%} to z-coordinate of player
   if time in world is not night:
    send "Respawn point set"
    cancel event

on rightclick on ender chest:
 set {_worldname} to "%world of player%"
 set {_worldcheck} to the first 2 characters of {_worldname}
 if {_worldcheck} is "s-":
  set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
  if last 6 characters of "%{_world}%" is "-world":
   set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
  if last 7 characters of "%{_world}%" is "-nether":
   set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
  if last 4 characters of "%{_world}%" is "-end":
   set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
  cancel event
  open chest with 3 rows named "Ender Chest" to player
  wait 1 ticks
  loop {server::%{_world}%::enderchest::%player%::*}:
   add loop-value to current inventory of player
  set {enderchest::%player%} to true
  
on inventory close:
 if {enderchest::%player%} is set:
  set {_worldname} to "%world of player%"
  set {_worldcheck} to the first 2 characters of {_worldname}
  if {_worldcheck} is "s-":
   set {_world} to last length of "%world of player%" - 2 characters of "%world of player%"
   if last 6 characters of "%{_world}%" is "-world":
    set {_world} to the first length of {_world} - 6 characters of "%{_world}%"
   if last 7 characters of "%{_world}%" is "-nether":
    set {_world} to the first length of {_world} - 7 characters of "%{_world}%"
   if last 4 characters of "%{_world}%" is "-end":
    set {_world} to the first length of {_world} - 4 characters of "%{_world}%"
   delete {server::%{_world}%::enderchest::%player%::*}
   loop 27 times:
    set {server::%{_world}%::enderchest::%player%::%loop-number - 1%} to slot "%loop-number - 1%" parsed as an integer of current inventory of player
   delete {enderchest::%player%}

on load:
 delete {enderchest::*}

# Modified PerWorldInventory Functions (https://www.spigotmc.org/resources/perworldinventory-api-no-more-bugs-of-inventories-for-skript-deployers-implement-in-yours-skripts.30492/)

function saveinv(w: text , p: player):
 set {_count} to 0
 loop 36 times:
  set {inv::%{_p}%::%{_count}%::main::%{_w}%} to slot {_count} of {_p}'s inventory
  add 1 to {_count}
 set {inv::%{_p}%::helmet::main::%{_w}%} to {_p}'s helmet
 set {inv::%{_p}%::chest::main::%{_w}%} to {_p}'s chestplate
 set {inv::%{_p}%::legs::main::%{_w}%} to {_p}'s leggings
 set {inv::%{_p}%::feet::main::%{_w}%} to {_p}'s boots
 set {inv::%{_p}%::shield::main::%{_w}%} to {_p}'s shield
 set {health::%{_w}%::%{_p}%} to health of {_p}
 set {hunger::%{_w}%::%{_p}%} to food level of {_p}
 set {xp::%{_w}%::%{_p}%} to xp of {_p}
 if {_p} is on fire:
  set {fire::%{_w}%::%{_p}%} to true
 else:
  set {fire::%{_w}%::%{_p}%} to false

function giveinv(w: text , p: player):
 execute console command "clear %{_p}%"
 wait 1 tick
 set {_count} to 0
 loop 36 times:
  set slot {_count} of {_p}'s inventory to {inv::%{_p}%::%{_count}%::main::%{_w}%}
  add 1 to {_count}
 set the helmet of {_p} to {inv::%{_p}%::helmet::main::%{_w}%}
 set the chestplate of {_p} to {inv::%{_p}%::chest::main::%{_w}%}
 set the leggings of {_p} to {inv::%{_p}%::legs::main::%{_w}%}
 set the boots of {_p} to {inv::%{_p}%::feet::main::%{_w}%}
 set the shield of {_p} to {inv::%{_p}%::shield::main::%{_w}%}
 set {_p}'s health to {health::%{_w}%::%{_p}%}
 set {_p}'s food level to {hunger::%{_w}%::%{_p}%}
 set xp of {_p} to {xp::%{_w}%::%{_p}%}
 if {fire::%{_w}%::%{_p}%} is true:
  set {_p} on fire
